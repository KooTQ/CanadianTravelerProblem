import numpy as np
import matplotlib.pyplot as plt

size = 100
repeat_each_amount = 15
pair_amount = 10
eps = 1e-6

Pairs = [(32, 71), (0, 94), (92, 20), (45, 53), (8, 32), (77, 43), (49, 24), (44, 30), (12, 82), (48, 52)]
# UPPER RANDOM
# Recheck:
results_recheck = [
    [8947.0, 3278.0, 4701.0, 2821.0, 3753.0, 2509.0, 2982.0, 2756.0, 4950.0, 4368.0, 2975.0, 2605.0, 3123.0, 2439.0,
     2969.0],
    [1557.0, 498.0, 8952.0, 1795.0, 366.0, 2572.0, 366.0, 1191.0, 366.0, 1702.0, 1761.0, 2021.0, 389.0, 3166.0, 366.0],
    [1501.0, 2130.0, 1501.0, 3797.0, 1525.0, 1501.0, 3185.0, 1501.0, 2071.0, 1501.0, 9910.0, 1937.0, 2761.0, 2372.0,
     3296.0],
    [1013.0, 1270.0, 1896.0, -1, 1131.0, 1222.0, 1802.0, 1856.0, 1991.0, 1328.0, 1009.0, 1257.0, -1, -1, 1523.0],
    [2921.0, 2320.0, 2992.0, 1915.0, 3406.0, -1, 3151.0, 6694.0, 1696.0, 1793.0, 3171.0, 2072.0, 4555.0, 2318.0,
     6910.0],
    [1915.0, 4626.0, 7610.0, 11106.0, 1344.0, 1140.0, 1846.0, 1334.0, 4633.0, 4808.0, 14591.0, 5064.0, 3976.0, 3241.0,
     2771.0],
    [5752.0, -1, 13715.0, 4137.0, 7917.0, 2656.0, 6472.0, 5953.0, -1, 3750.0, -1, 3308.0, 9709.0, 9872.0, 6386.0],
    [2266.0, 1590.0, 668.0, 668.0, 3783.0, 10509.0, 921.0, 2165.0, 7651.0, 1863.0, 1430.0, 6018.0, 2327.0, 3839.0,
     921.0], [90.0, 2191.0, 90.0, 607.0, 90.0, 5590.0, -1, 90.0, -1, -1, 480.0, 618.0, 1179.0, 90.0, -1],
    [586.0, 1110.0, 812.0, 2777.0, 812.0, 586.0, 1452.0, 586.0, 2742.0, 2972.0, 871.0, 883.0, 1501.0, 653.0, 2265.0]]
# Keep:
results_keep = [
    [5656.0, 2919.0, 4184.0, 8124.0, 10248.0, 2850.0, 2585.0, 2750.0, 5268.0, 2952.0, 2304.0, 2830.0, 3595.0, 5530.0,
     3116.0],
    [2810.0, 5895.0, 1813.0, 795.0, 1940.0, 366.0, 3589.0, 366.0, 389.0, 602.0, 1613.0, 366.0, 3999.0, 2781.0, 3942.0],
    [3929.0, 2199.0, 2910.0, 2494.0, 4361.0, 5598.0, 2259.0, 1604.0, 1543.0, 2071.0, 2174.0, 1501.0, 4593.0, 3022.0,
     2219.0],
    [1617.0, -1, 1657.0, 2406.0, -1, 1776.0, 3240.0, 1378.0, 1640.0, 5013.0, 1768.0, 728.0, -1, 1259.0, 8802.0],
    [2111.0, 1889.0, 2848.0, 3453.0, 4741.0, 2171.0, 3211.0, 2739.0, 1802.0, 3749.0, 2296.0, 2184.0, 2579.0, 2188.0,
     1793.0],
    [4339.0, 1104.0, 1104.0, 1715.0, 2650.0, 1886.0, 3301.0, 1822.0, 1925.0, 1140.0, 1796.0, 2041.0, 1700.0, 1140.0,
     6143.0],
    [8274.0, 3025.0, -1, 4317.0, 2699.0, 3947.0, -1, 8739.0, 4647.0, 4813.0, 4990.0, 2978.0, 3767.0, 5885.0, 2889.0],
    [3117.0, 668.0, 1409.0, 1255.0, 2241.0, 1828.0, 1694.0, 668.0, 3026.0, 668.0, 1422.0, 5524.0, 668.0, 6016.0, 820.0],
    [1769.0, 1983.0, 1218.0, 4934.0, 628.0, 90.0, -1, 169.0, 90.0, 90.0, 1585.0, 1857.0, 462.0, 3239.0, 90.0],
    [586.0, 878.0, 889.0, 594.0, 1148.0, 729.0, 1605.0, 907.0, 1468.0, 1329.0, 809.0, 605.0, 794.0, 1518.0, 2120.0]]
# Time recheck:
# times_recheck = [11604855.53741455, 5290928.363800049, 8161342.38243103, 4581069.231033325, 7870183.229446411,
#                  8344370.365142822, 11180425.16708374, 6210217.237472534, 3880627.393722534, 5331745.386123657]
# Time keeps:
# times_keep = [14592286.109924316, 6443442.583084106, 7852587.461471558, 6109180.688858032, 7456597.089767456,
#               4411386.966705322, 9631738.424301147, 3342964.6492004395, 5027932.643890381, 4827051.162719727]

# # LOWER RANDOM
# # Recheck:
# results_recheck = [[2177.0, 2216.0, 2177.0, 2177.0, 2177.0, 2177.0, 2216.0, 2177.0, 2443.0, 2185.0, 2177.0, 2177.0, 2221.0, 2181.0, 2177.0], [389.0, 366.0, 389.0, 366.0, 366.0, 366.0, 389.0, 366.0, 879.0, 366.0, 366.0, 366.0, 389.0, 366.0, 389.0], [1525.0, 1501.0, 1501.0, 1501.0, 1501.0, 1501.0, 1501.0, 1525.0, 1525.0, 1525.0, 1529.0, 1629.0, 1501.0, 1501.0, 1501.0], [912.0, 728.0, 731.0, 728.0, 990.0, 992.0, 884.0, 981.0, 884.0, 777.0, 728.0, 1113.0, 728.0, 875.0, 728.0], [1867.0, 1666.0, 1696.0, 1666.0, 1828.0, 1684.0, 1666.0, 1696.0, 1684.0, 1666.0, 1685.0, 1666.0, 1685.0, 1684.0, 2205.0], [1146.0, 1104.0, 1104.0, 1104.0, 1140.0, 1104.0, 1140.0, 1104.0, 1104.0, 1140.0, 1146.0, 1104.0, 1996.0, 1104.0, 1104.0], [2471.0, 2449.0, 2449.0, 2658.0, 2613.0, 2563.0, 2462.0, 2522.0, 2462.0, 2449.0, 2522.0, 2449.0, 2476.0, 2462.0, 2457.0], [668.0, 901.0, 1202.0, 820.0, 668.0, 668.0, 668.0, 668.0, 668.0, 668.0, 668.0, 2124.0, 1308.0, 668.0, 668.0], [294.0, 169.0, 90.0, 90.0, 90.0, 324.0, 90.0, 90.0, 428.0, 90.0, 90.0, 498.0, 403.0, 90.0, 90.0], [586.0, 586.0, 777.0, 586.0, 586.0, 586.0, 586.0, 594.0, 586.0, 586.0, 586.0, 586.0, 586.0, 586.0, 586.0]]
# # Keep:
# results_keep = [[2177.0, 2186.0, 2224.0, 2266.0, 2177.0, 2177.0, 2177.0, 2177.0, 2177.0, 2177.0, 2177.0, 2216.0, 2195.0, 2177.0, 2185.0], [366.0, 398.0, 366.0, 366.0, 366.0, 366.0, 366.0, 366.0, 389.0, 366.0, 366.0, 366.0, 366.0, 366.0, 366.0], [1501.0, 1501.0, 1501.0, 1501.0, 1533.0, 1501.0, 1501.0, 1501.0, 1501.0, 1501.0, 1501.0, 1501.0, 1501.0, 1533.0, 1501.0], [728.0, 959.0, 728.0, 884.0, 728.0, 875.0, 728.0, 875.0, 728.0, 728.0, 884.0, 728.0, 959.0, 728.0, 729.0], [1708.0, 1717.0, 1666.0, 1685.0, 1696.0, 1666.0, 1712.0, 1864.0, 1685.0, 1666.0, 1666.0, 1666.0, 1751.0, 1666.0, 1944.0], [1140.0, 1104.0, 1140.0, 1104.0, 1104.0, 1104.0, 1104.0, 1104.0, 1104.0, 1140.0, 1560.0, 1104.0, 1104.0, 1104.0, 1560.0], [2545.0, 2475.0, 2462.0, 2541.0, 2449.0, 2690.0, 2562.0, 2588.0, 2485.0, 2457.0, 2559.0, 2483.0, 2449.0, 2449.0, 2470.0], [668.0, 668.0, 668.0, 1308.0, 668.0, 668.0, 668.0, 820.0, 668.0, 1150.0, 668.0, 1255.0, 668.0, 1197.0, 668.0], [90.0, 90.0, 90.0, 90.0, 90.0, 294.0, 90.0, 90.0, 90.0, 294.0, 90.0, 90.0, 90.0, 169.0, 90.0], [594.0, 586.0, 594.0, 777.0, 586.0, 594.0, 586.0, 615.0, 802.0, 615.0, 586.0, 586.0, 586.0, 594.0, 586.0]]
# # Time keeps:
times_recheck = [4494262.218475342, 1297198.77243042, 2545461.416244507, 4047525.16746521, 5626549.005508423, 3015157.461166382, 7130648.136138916, 1664990.4251098633, 1830879.9266815186, 2699343.9197540283]
# # Time recheck:
times_keep = [5449655.532836914, 1602020.263671875, 2721341.848373413, 3881637.8116607666, 4702120.780944824, 3269009.828567505, 8159017.80128479, 1672969.8181152344, 2194659.70993042, 2129699.468612671]

print("\n")
for i in range(len(times_keep)):
    print(('%.2f' % (times_recheck[i] / 1e6)) + "\t" + ('%.2f' % (times_keep[i] / 1e6)) +
          "\t" + ('%.2f' % ((times_recheck[i] - times_keep[i]) / 1e6)))
print("\n")
print(('%.2f' % (sum(times_recheck) / 1e6)) + "\t" + ('%.2f' % (sum(times_keep) / 1e6)) +
      "\t" + ('%.2f' % ((sum(times_recheck) - sum(times_keep)) / 1e6)))
print("\n")

avg_keeps = []
avg_rechecks = []

counter_keep = []
counter_recheck = []

for result in results_keep:
    avg_keep = 0
    counter = eps
    for res in result:
        if res != -1:
            avg_keep += res
        else:
            counter += 1
    if counter < len(result):
        avg_keeps.append(avg_keep / (len(result) - counter))
    else:
        avg_keeps.append(None)
    counter_keep.append((len(result) - counter) / len(result))

for result in results_recheck:
    avg_recheck = 0
    counter = eps
    for res in result:
        if res != -1:
            avg_recheck += res
        else:
            counter += 1
    if counter < len(result):
        avg_rechecks.append(avg_recheck / (len(result) - counter))
    else:
        avg_rechecks.append(None)
    counter_recheck.append((len(result) - counter) / len(result))

for i in range(len(avg_rechecks)):
    print(('%.2f' % avg_rechecks[i]) + "\t" + ('%.2f' % avg_keeps[i]) +
          "\t" + ('%.2f' % (avg_rechecks[i] - avg_keeps[i])))

dif = [avg_rechecks[i] - avg_keeps[i] for i in range(len(avg_keeps))]

print(sum(avg_keeps))
print(sum(avg_rechecks))
print(sum(dif))
arr_keeps = np.array(results_keep)
arr_rechecks = np.array(results_recheck)
arr_count_keeps = np.array(counter_keep)
arr_count_rechecks = np.array(counter_recheck)
arr_times_keeps = np.array(times_keep) / 1e6
arr_times_recheck = np.array(times_recheck) / 1e6
fig1, ax1 = plt.subplots()
fig2, ax2 = plt.subplots()
fig3, ax3 = plt.subplots()
fig4, ax4 = plt.subplots()
ax1.set_title('OPT Koszt')
ax2.set_title('OPP Koszt')
ax3.set_title('OPT Skutecznosc - czerwone; OPP Skutecznosc - niebieskie')
ax4.set_title('OPT Czas wykonania - czerwone; OPP Czas wykonania - niebieskie')
ax1.boxplot(arr_keeps.transpose())
ax1.set_xlabel('Para testowana')
ax1.set_ylabel('Koszt trasy')
ax2.boxplot(arr_rechecks.transpose())
ax2.set_xlabel('Para testowana')
ax2.set_ylabel('Koszt trasy')
ax3.set_xlabel('Para testowana')
ax3.set_ylabel('Skutecznosc')
ax3.plot(arr_count_keeps.transpose(), 'ro')
ax3.plot(arr_count_rechecks.transpose(), 'b+')
ax4.set_xlabel('Para testowana')
ax4.set_ylabel('Czas [s]')
ax4.plot(arr_times_keeps.transpose(), 'ro')
ax4.plot(arr_times_recheck.transpose(), 'b+')
ax4.plot()
plt.show()

print(counter_keep)
print(counter_recheck)
print(sum(counter_keep) / len(counter_keep))
print(sum(counter_recheck) / len(counter_recheck))

# End of file
